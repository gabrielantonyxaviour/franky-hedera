#!/bin/bash

# Franky - Combined script for SillyTavern with Ollama, ngrok, and wallet creation
# Usage: franky start

# Webhook URLs for different events
DEVICE_WEBHOOK_URL="https://693f-111-235-226-130.ngrok-free.app"
AGENT_WEBHOOK_URL="https://2b55-111-235-226-130.ngrok-free.app"

# API Endpoints for fetching devices and agents
DEVICES_ENDPOINT="https://www.frankyagent.xyz/api/graph/devices-by-wallet?address="
AGENT_ENDPOINT="https://www.frankyagent.xyz/api/graph/agent-by-wallet"

# Function to setup dependencies and configuration    
setup_dependencies() {
    # Install all dependencies
    echo "üì¶ Installing dependencies..."
    npm install
    echo "‚úÖ Dependencies installed"

    # Install ethers specifically
    echo "üì¶ Installing ethers v5.5.1..."
    npm install ethers@5.5.1
    echo "‚úÖ Ethers v5.5.1 installed"

    # Update config.yaml with custom settings
    echo "üîß Updating configuration settings..."
    if [ -f "config.yaml" ]; then
        # Create backup of original config
        cp config.yaml config.yaml.backup
        
        # Detect OS for sed compatibility
        if [[ "$OSTYPE" == "darwin"* ]]; then
            # macOS
            SED_CMD="sed -i ''"
        elif [[ "$OSTYPE" == "linux"* ]] || [[ "$OSTYPE" == "msys"* ]] || [[ "$OSTYPE" == "cygwin"* ]]; then
            # Linux or Windows (Git Bash/Cygwin)
            SED_CMD="sed -i"
        else
            # Fallback - try Linux style
            SED_CMD="sed -i"
        fi
        
        # Create a temporary file for the new configuration
        TMP_CONFIG=$(mktemp)
        
        # Read the original config and apply changes
        while IFS= read -r line; do
            case "$line" in
                *"listen:"*)
                    echo "listen: true" >> "$TMP_CONFIG"
                    ;;
                *"port:"*)
                    echo "port: 8000" >> "$TMP_CONFIG"
                    ;;
                *"whitelistMode:"*)
                    echo "whitelistMode: false" >> "$TMP_CONFIG"
                    ;;
                *"securityOverride:"*)
                    echo "securityOverride: true" >> "$TMP_CONFIG"
                    ;;
                *"disableCsrfProtection:"*)
                    echo "disableCsrfProtection: true" >> "$TMP_CONFIG"
                    ;;
                *)
                    echo "$line" >> "$TMP_CONFIG"
                    ;;
            esac
        done < config.yaml
        
        # Replace the original file with the new one
        mv "$TMP_CONFIG" config.yaml
        
        # Ensure proper line endings for the OS
        if [[ "$OSTYPE" == "msys"* ]] || [[ "$OSTYPE" == "cygwin"* ]]; then
            # Convert to DOS line endings for Windows
            unix2dos config.yaml 2>/dev/null || true
        fi
        
        echo "‚úÖ Configuration updated successfully"
    else
        echo "‚ö†Ô∏è config.yaml not found. Creating with custom settings..."
        # Create the config file with the appropriate line endings
        if [[ "$OSTYPE" == "msys"* ]] || [[ "$OSTYPE" == "cygwin"* ]]; then
            # Windows - use DOS line endings
            cat > config.yaml << 'EOL'
# SillyTavern configuration
listen: true
port: 8000
whitelistMode: false
securityOverride: true
disableCsrfProtection: true
EOL
            unix2dos config.yaml 2>/dev/null || true
        else
            # Unix-like systems - use Unix line endings
            cat > config.yaml << 'EOL'
# SillyTavern configuration
listen: true
port: 8000
whitelistMode: false
securityOverride: true
disableCsrfProtection: true
EOL
        fi
        echo "‚úÖ Custom config.yaml created"
    fi
}

# Function to start SillyTavern with Ollama and ngrok
start_sillytavern() {
    echo "üöÄ Starting SillyTavern with Ollama and ngrok support..."

    # Create data directory if it doesn't exist
    mkdir -p data
    mkdir -p data/user
    mkdir -p data/characters
    mkdir -p data/chats
    mkdir -p data/groups
    mkdir -p data/themes

    # Check if Ollama is already running
    if curl -s http://127.0.0.1:11434/api/tags > /dev/null; then
        echo "‚úÖ Ollama server is running"
    else
        echo "‚ùå Ollama is not running. Starting Ollama..."
        # Start Ollama in the background
        ollama serve > ollama.log 2>&1 &
        
        # Wait for Ollama to start
        for i in {1..10}; do
            if curl -s http://127.0.0.1:11434/api/tags > /dev/null; then
                echo "‚úÖ Ollama server started successfully"
                break
            else
                echo "‚è≥ Waiting for Ollama to start... ($i/10)"
                sleep 2
                
                if [ $i -eq 10 ]; then
                    echo "‚ùå Failed to start Ollama after multiple attempts"
                    exit 1
                fi
            fi
        done
    fi

    # Get available models from Ollama
    MODELS=$(curl -s http://127.0.0.1:11434/api/tags | grep -o '"name":"[^"]*' | cut -d'"' -f4 | tr '\n' ', ')
    echo "üìã Available models: $MODELS"

    # Check if the ollama-proxy.js file exists
    if [ ! -f "src/endpoints/chat.js" ]; then
        echo "‚ö†Ô∏è chat.js file not found. Creating it..."
        
        # Create the directory if it doesn't exist
        mkdir -p src/endpoints
        
        # Create the ollama-proxy.js file
        cat > src/endpoints/chat.js << 'EOL'
import express from 'express';
import { trimV1 } from '../util.js';

export const router = express.Router();

// This endpoint allows external access to Ollama through SillyTavern
router.post('/generate', async (request, response) => {
  try {
    console.log('‚ö° Received generate request:', request.body);
    const ollamaUrl = 'http://127.0.0.1:11434';
    
    // Forward the request to Ollama
    const ollamaResponse = await fetch(`${ollamaUrl}/api/generate`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(request.body),
    });
    
    if (!ollamaResponse.ok) {
      const errorText = await ollamaResponse.text();
      console.error('‚ùå Ollama proxy error:', ollamaResponse.status, errorText);
      return response.status(ollamaResponse.status).send(errorText);
    }
    
    // Return the Ollama response
    const data = await ollamaResponse.json();
    console.log('‚úÖ Ollama generate response received');
    return response.send(data);
  } catch (error) {
    console.error('‚ùå Ollama proxy error:', error);
    return response.status(500).send({ error: error.message });
  }
});

// Get available models
router.get('/models', async (request, response) => {
  try {
    console.log('‚ö° Received models request');
    const ollamaUrl = 'http://127.0.0.1:11434';
    
    const ollamaResponse = await fetch(`${ollamaUrl}/api/tags`);
    
    if (!ollamaResponse.ok) {
      const errorText = await ollamaResponse.text();
      console.error('‚ùå Ollama models error:', ollamaResponse.status, errorText);
      return response.status(ollamaResponse.status).send(errorText);
    }
    
    const data = await ollamaResponse.json();
    console.log('‚úÖ Ollama models response received');
    return response.send(data);
  } catch (error) {
    console.error('‚ùå Ollama models error:', error);
    return response.status(500).send({ error: error.message });
  }
});
EOL
        echo "‚úÖ Created chat.js"
    fi

    # Update server-startup.js to include our ollama-proxy endpoint
    if ! grep -q "ollamaProxyRouter" src/server-startup.js; then
        echo "‚ö†Ô∏è ollamaProxyRouter not found in server-startup.js. Adding it..."
        
        # Add the import
        sed -i "1s|^|import { router as ollamaProxyRouter } from './endpoints/chat.js';\n|" src/server-startup.js
        
        # Add the endpoint registration
        sed -i "/app\.use('\/api\/azure', azureRouter);/a \ \ \ \ app.use('/api/chat', ollamaProxyRouter);" src/server-startup.js
        
        echo "‚úÖ Updated server-startup.js"
    fi

    # Get device IP for external access
    IP=$(ip addr show | grep -E "inet .* scope global" | grep -oE "([0-9]{1,3}\.){3}[0-9]{1,3}" | head -1)
    echo "üåê Local device IP: $IP"

    # Check if ngrok is installed
    if ! command -v ngrok &> /dev/null; then
        echo "‚ö†Ô∏è ngrok is not installed or not in PATH"
        echo "Please install ngrok or make sure it's in your PATH"
    else
        # Start ngrok in a new terminal if it's not already running
        if ! curl -s http://127.0.0.1:4040/api/tunnels > /dev/null; then
            echo "üîÑ Starting ngrok tunnel for port 8000..."
            ngrok http 8000 > ngrok.log 2>&1 &
            
            # Wait for ngrok to start
            sleep 5
            
            # Get the ngrok URL
            NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4 | head -1)
            if [ -n "$NGROK_URL" ]; then
                echo "üåç ngrok tunnel URL: $NGROK_URL"
                echo "üìù API endpoint for Postman: $NGROK_URL/api/chat"
            else
                echo "‚ö†Ô∏è Could not get ngrok URL. Is ngrok running properly?"
            fi
        else
            # Get the ngrok URL if it's already running
            NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4 | head -1)
            if [ -n "$NGROK_URL" ]; then
                echo "üåç ngrok tunnel already running at: $NGROK_URL"
                echo "üìù API endpoint for Postman: $NGROK_URL/api/chat"
            else
                echo "‚ö†Ô∏è ngrok is running but could not get URL"
            fi
        fi
    fi

    echo "----------------------------"
    echo "üìå Example POST request body:"
    echo '{
      "model": "'$(echo $MODELS | cut -d',' -f1)'",
      "prompt": "What is the capital of France?",
      "stream": false
    }'
    echo "----------------------------"

    # Start SillyTavern with explicit data path and CORS disabled
    echo "üß© Starting SillyTavern..."
    node server.js --dataRoot="$PWD/data" --listen --port=8000 --enableCorsProxy --disableCsrf &
    SERVER_PID=$!
    
    # Wait for server to start
    echo "‚è≥ Waiting for SillyTavern to start..."
    sleep 5
    
    # Now proceed with wallet creation
    create_wallet
}

# Function to create wallet
create_wallet() {
    echo "üí∞ Starting wallet creation process..."
    
    # Ensure the wallet script exists
    WALLET_SCRIPT="createWalletWithSalt.cjs"
    if [ ! -f "$WALLET_SCRIPT" ]; then
        echo "‚ùå Wallet script not found: $WALLET_SCRIPT"
        exit 1
    fi

    # Ensure required packages are installed
    if command -v pkg &> /dev/null; then
        echo "üì¶ Updating packages..."
        pkg update
        pkg install -y nodejs qrencode termux-api jq curl
    else
        echo "‚ö†Ô∏è pkg command not found. Assuming we're not in Termux environment."
        # Check for required commands
        for cmd in node qrencode jq curl; do
            if ! command -v $cmd &> /dev/null; then
                echo "‚ùå Required command not found: $cmd"
                echo "Please install the required packages"
                exit 1
            fi
        done
    fi

    # Generate salt based on device characteristics
    echo "üîë Generating device-specific salt..."
    
    # Try to get device model
    DEVICE_MODEL=""
    if command -v getprop &> /dev/null; then
        DEVICE_MODEL=$(getprop ro.product.model)
    elif [ -f "/sys/devices/virtual/dmi/id/product_name" ]; then
        DEVICE_MODEL=$(cat /sys/devices/virtual/dmi/id/product_name)
    else
        DEVICE_MODEL=$(uname -n)
    fi
    echo "üì± Device Model: $DEVICE_MODEL"

    # Get RAM info
    RAM=""
    if command -v free &> /dev/null; then
        RAM=$(free -h | awk '/Mem:/ {print $2}')
    else
        RAM="Unknown"
    fi
    echo "üß† RAM: $RAM"

    # Get storage info
    STORAGE=""
    if command -v df &> /dev/null; then
        STORAGE=$(df -h / | awk '/\// {print $2}')
    else
        STORAGE="Unknown"
    fi
    echo "üíæ Storage: $STORAGE"

    # Get CPU info
    CPU="Unknown"
    if [ -f "/proc/cpuinfo" ]; then
        CPU=$(cat /proc/cpuinfo | grep -m 1 "Hardware" | cut -d: -f2 | sed 's/^[[:space:]]*//')
        if [ -z "$CPU" ]; then
            CPU=$(cat /proc/cpuinfo | grep -m 1 "model name" | cut -d: -f2 | sed 's/^[[:space:]]*//')
        fi
    fi
    echo "üîÑ CPU: $CPU"

    # Create a deterministic salt from device details with added randomness
    RANDOM_FACTOR=$(date +%s%N | md5sum | cut -d' ' -f1)
    SALT=$(echo "$DEVICE_MODEL$RAM$STORAGE$CPU$RANDOM_FACTOR" | md5sum | cut -d' ' -f1)
    echo "üßÇ Generated Salt with Randomness: $SALT"

    # Prepare device details string for bytes32 conversion
    DEVICE_INFO="$DEVICE_MODEL$RAM$STORAGE$CPU"
    
    # Generate bytes32 using our JavaScript function
    echo "üìä Generating bytes32 from device info..."
    DEVICE_BYTES32=$(node -e "
      const { stringToBytes32 } = require('./$WALLET_SCRIPT');
      console.log(stringToBytes32('$DEVICE_INFO'));
    ")
    echo "üìä Device Bytes32: $DEVICE_BYTES32"

    # Generate wallet
    echo "üíº Generating wallet..."
    WALLET_OUTPUT=$(node "$WALLET_SCRIPT" "$SALT")

    # Extract wallet details
    WALLET_ADDRESS=$(echo "$WALLET_OUTPUT" | grep "Address:" | cut -d: -f2 | tr -d ' ')
    PRIVATE_KEY=$(echo "$WALLET_OUTPUT" | grep "Private Key:" | cut -d: -f2 | tr -d ' ')
    MNEMONIC=$(echo "$WALLET_OUTPUT" | grep "Mnemonic" | sed -E 's/.*\((12|24) words\): //')

    # Sign the device details bytes32
    echo "‚úçÔ∏è Signing device details..."
    SIGNATURE_OUTPUT=$(node "$WALLET_SCRIPT" "$SALT" --sign "$DEVICE_BYTES32")
    SIGNATURE=$(echo "$SIGNATURE_OUTPUT" | grep "Signature:" | cut -d: -f2 | tr -d ' ')

    # Get ngrok URL if available
    if [ -z "$NGROK_URL" ]; then
        NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*' | cut -d'"' -f4 | head -1)
        if [ -z "$NGROK_URL" ]; then
            NGROK_URL="https://example.ngrok.app"
            echo "‚ö†Ô∏è Could not get ngrok URL, using placeholder"
        fi
    fi

    # URL encode the parameters
    echo "üîÑ URL encoding parameters..."
    if command -v jq &> /dev/null; then
        ENCODED_DEVICE_MODEL=$(printf "%s" "$DEVICE_MODEL" | jq -sRr @uri)
        ENCODED_RAM=$(printf "%s" "$RAM" | jq -sRr @uri)
        ENCODED_STORAGE=$(printf "%s" "$STORAGE" | jq -sRr @uri)
        ENCODED_CPU=$(printf "%s" "$CPU" | jq -sRr @uri)
        ENCODED_SIGNATURE=$(printf "%s" "$SIGNATURE" | jq -sRr @uri)
    else
        # Fallback to simple URL encoding
        ENCODED_DEVICE_MODEL=$(printf "%s" "$DEVICE_MODEL" | sed 's/ /%20/g')
        ENCODED_RAM=$(printf "%s" "$RAM" | sed 's/ /%20/g')
        ENCODED_STORAGE=$(printf "%s" "$STORAGE" | sed 's/ /%20/g')
        ENCODED_CPU=$(printf "%s" "$CPU" | sed 's/ /%20/g')
        ENCODED_SIGNATURE=$(printf "%s" "$SIGNATURE" | sed 's/ /%20/g')
    fi

    # Construct the full URL with URL-encoded parameters
    FULL_URL="https://frankyagent.xyz/deploy-device?deviceModel=${ENCODED_DEVICE_MODEL}&ram=${ENCODED_RAM}&storage=${ENCODED_STORAGE}&cpu=${ENCODED_CPU}&ngrokLink=${NGROK_URL}&walletAddress=${WALLET_ADDRESS}&bytes32Data=${DEVICE_BYTES32}&signature=${ENCODED_SIGNATURE}"

    # Print out all details for verification
    echo "=== Wallet Details ==="
    echo "Salt: $SALT"
    echo "Address: $WALLET_ADDRESS"
    echo "Private Key: $PRIVATE_KEY"
    echo "Mnemonic: $MNEMONIC"
    echo

    echo "=== Device Details ==="
    echo "Device Model: $DEVICE_MODEL"
    echo "RAM: $RAM"
    echo "Storage: $STORAGE"
    echo "CPU: $CPU"
    echo "Bytes32 Data: $DEVICE_BYTES32"
    echo

    echo "=== Signature Details ==="
    echo "Signature: $SIGNATURE"
    echo

    echo "=== Generated URL ==="
    echo "$FULL_URL"
    echo

    # Generate QR Code
    echo "üì± Generating QR code..."
    if command -v qrencode &> /dev/null; then
        qrencode -t ANSIUTF8 "$FULL_URL"
        qrencode -o qr_code.png -s 10 "$FULL_URL"
        echo "‚úÖ QR code generated: qr_code.png"
        
        # Share the QR code using Termux:API if available
        # if command -v termux-open &> /dev/null; then
        #     echo "üì§ Sharing QR code..."
        # else
        #     echo "‚ö†Ô∏è termux-open not available. QR code saved to qr_code.png"
        # fi
    else
        echo "‚ùå qrencode not available. Cannot generate QR code."
    fi
    
    echo "üîÑ Waiting for device registration confirmation..."
    echo "Listening for events from webhook: $DEVICE_WEBHOOK_URL"
    echo "This may take a few minutes. Please scan the QR code to register your device."
    echo "Press Ctrl+C to cancel waiting."
    
    # Create a temporary file to store the webhook response
    TEMP_FILE=$(mktemp)
    
    # Function to check if device is registered
    check_registration() {
        # Set a timeout for the registration process (10 minutes)
        TIMEOUT=600
        START_TIME=$(date +%s)
        
        while true; do
            CURRENT_TIME=$(date +%s)
            ELAPSED=$((CURRENT_TIME - START_TIME))
            
            if [ $ELAPSED -gt $TIMEOUT ]; then
                echo "‚ùå Timeout waiting for device registration."
                echo "Please check if the device was registered correctly."
                return 1
            fi
            
            echo "‚è≥ Checking for registration events... (${ELAPSED}s elapsed)"
            
            # Fetch the list of devices from new API endpoint
            TEMP_FILE=$(mktemp)
            curl -s "${DEVICES_ENDPOINT}${WALLET_ADDRESS}" > "$TEMP_FILE" 2>/dev/null
            
            # Check if we got a valid response
            if [ -s "$TEMP_FILE" ] && jq empty "$TEMP_FILE" 2>/dev/null; then
                echo "‚úÖ Received device list from API"
                
                # Get the most recent device (last in the array)
                DEVICES_COUNT=$(jq length "$TEMP_FILE")
                
                if [ "$DEVICES_COUNT" -gt 0 ]; then
                    # Get the last device in the array
                    LAST_DEVICE_INDEX=$((DEVICES_COUNT - 1))
                    LAST_DEVICE=$(jq ".[$LAST_DEVICE_INDEX]" "$TEMP_FILE")
                    
                    # Extract device details
                    REGISTERED_ADDRESS=$(echo "$LAST_DEVICE" | jq -r '.id')
                    REGISTERED_OWNER=$(echo "$LAST_DEVICE" | jq -r '.owner.id')
                    REGISTERED_NGROK=$(echo "$LAST_DEVICE" | jq -r '.ngrokLink')
                    REGISTERED_FEE=$(echo "$LAST_DEVICE" | jq -r '.hostingFee')
                    CREATED_AT=$(echo "$LAST_DEVICE" | jq -r '.createdAt')
                    UPDATED_AT=$(echo "$LAST_DEVICE" | jq -r '.updatedAt')
                    DEVICE_METADATA_URL=$(echo "$LAST_DEVICE" | jq -r '.deviceMetadata')
                    
                    echo "üì± Found latest registered device: $REGISTERED_ADDRESS"
                    
                    # Check if the device address matches our wallet address
                    if [ "$(echo "$REGISTERED_ADDRESS" | tr '[:upper:]' '[:lower:]')" = "$(echo "$WALLET_ADDRESS" | tr '[:upper:]' '[:lower:]')" ]; then
                        echo "‚úÖ Device registration confirmed!"
                        echo "‚úÖ Device address verified: $REGISTERED_ADDRESS"
                        
                        # Fetch device metadata to verify details
                        echo "üîç Fetching device metadata from Akave..."
                        METADATA_FILE=$(mktemp)
                        curl -s "$DEVICE_METADATA_URL" > "$METADATA_FILE" 2>/dev/null
                        
                        if [ -s "$METADATA_FILE" ] && jq empty "$METADATA_FILE" 2>/dev/null; then
                            # Extract device details from metadata
                            REGISTERED_MODEL=$(jq -r '.deviceModel' "$METADATA_FILE")
                            REGISTERED_RAM=$(jq -r '.ram' "$METADATA_FILE")
                            REGISTERED_STORAGE=$(jq -r '.storage' "$METADATA_FILE")
                            REGISTERED_CPU=$(jq -r '.cpu' "$METADATA_FILE")
                            
                            echo "=== Registration Details ==="
                            echo "Owner: $REGISTERED_OWNER"
                            echo "Device Model: $REGISTERED_MODEL"
                            echo "RAM: $REGISTERED_RAM"
                            echo "Storage: $REGISTERED_STORAGE" 
                            echo "CPU: $REGISTERED_CPU"
                            echo "Ngrok Link: $REGISTERED_NGROK"
                            echo "Hosting Fee: $REGISTERED_FEE"
                            echo "Created At: $CREATED_AT"
                            echo "Updated At: $UPDATED_AT"
                            echo
                            
                            # Verify device details
                            echo "=== Device Details Verification ==="
                            if [ "$REGISTERED_MODEL" = "$DEVICE_MODEL" ]; then
                                echo "‚úÖ Device model verified"
                            else
                                echo "‚ÑπÔ∏è Device model differs:"
                                echo "  Local: $DEVICE_MODEL"
                                echo "  Registered: $REGISTERED_MODEL"
                            fi
                            
                            if [ "$REGISTERED_RAM" = "$RAM" ]; then
                                echo "‚úÖ RAM verified"
                            else
                                echo "‚ÑπÔ∏è RAM differs:"
                                echo "  Local: $RAM"
                                echo "  Registered: $REGISTERED_RAM"
                            fi
                            
                            if [ "$REGISTERED_STORAGE" = "$STORAGE" ]; then
                                echo "‚úÖ Storage verified"
                            else
                                echo "‚ÑπÔ∏è Storage differs:"
                                echo "  Local: $STORAGE"
                                echo "  Registered: $REGISTERED_STORAGE"
                            fi
                            
                            if [ "$REGISTERED_CPU" = "$CPU" ]; then
                                echo "‚úÖ CPU verified"
                            else
                                echo "‚ÑπÔ∏è CPU differs:"
                                echo "  Local: $CPU"
                                echo "  Registered: $REGISTERED_CPU"
                            fi
                            
                            # Create the credentials directory if it doesn't exist
                            CREDS_DIR="$PWD/credentials"
                            mkdir -p "$CREDS_DIR"
                            
                            # Store device credentials in a predictable location
                            CREDS_FILE="$CREDS_DIR/device_credentials.txt"
                            echo "=== Device Credentials ===" > "$CREDS_FILE"
                            echo "Device Address: $REGISTERED_ADDRESS" >> "$CREDS_FILE"
                            echo "Owner Address: $REGISTERED_OWNER" >> "$CREDS_FILE"
                            echo "Private Key: $PRIVATE_KEY" >> "$CREDS_FILE"
                            echo "Mnemonic: $MNEMONIC" >> "$CREDS_FILE"
                            echo "Hosting Fee: $REGISTERED_FEE" >> "$CREDS_FILE"
                            echo "Registration Time: $CREATED_AT" >> "$CREDS_FILE"
                            
                            # Set restrictive permissions on the credentials file
                            chmod 600 "$CREDS_FILE"
                            
                            echo "‚úÖ Device credentials saved to: $CREDS_FILE"
                            
                            # Clean up temporary files
                            rm -f "$TEMP_FILE" "$METADATA_FILE"
                            return 0
                        else
                            echo "‚ö†Ô∏è Could not fetch or parse device metadata"
                        fi
                        
                        # Clean up temporary files
                        rm -f "$TEMP_FILE" "$METADATA_FILE"
                        return 0
                    else
                        echo "‚ÑπÔ∏è Device address doesn't match local wallet"
                        echo "Found: $REGISTERED_ADDRESS"
                        echo "Local: $WALLET_ADDRESS"
                    fi
                else
                    echo "‚ÑπÔ∏è No devices found in the API response"
                fi
            else
                echo "‚ÑπÔ∏è No valid response from devices API"
            fi
            
            # Clean up
            rm -f "$TEMP_FILE"
            
            # Wait before checking again
            sleep 10
        done
    }
    
    # Start checking for registration
    if check_registration; then
        echo "üéâ Device registration complete!"
        echo "Your device is now registered on the blockchain."
        echo
        echo "=== Your Wallet Details ==="
        echo "Address: $WALLET_ADDRESS"
        echo "Private Key: $PRIVATE_KEY"
        echo "Mnemonic: $MNEMONIC"
        echo
        echo "IMPORTANT: Keep your private key and mnemonic secure!"
    else
        echo "‚ö†Ô∏è Device registration process did not complete successfully."
        echo "You can still use your wallet, but the device may not be registered on-chain."
        echo
        echo "=== Your Wallet Details ==="
        echo "Address: $WALLET_ADDRESS"
        echo "Private Key: $PRIVATE_KEY"
        echo "Mnemonic: $MNEMONIC"
    fi
    
    # Clean up
    rm -f "$TEMP_FILE"
    
    echo "‚úÖ Wallet creation process completed!"
    echo "üöÄ SillyTavern is running with Ollama integration and wallet has been created."
    echo "Press Ctrl+C to stop the server when you're done."
    
    # Wait for the server process to complete
    wait $SERVER_PID
}

# Function to list latest agent
list_latest_agent() {
    echo "üîç Fetching latest agent details..."
    
    # Create a temporary file to store the response
    TEMP_FILE=$(mktemp)
    
    # First fetch the list of all devices to find agents
    echo "üì° Fetching devices from: $DEVICES_ENDPOINT"
    curl -s "$DEVICES_ENDPOINT" > "$TEMP_FILE" 2>/dev/null
    
    # Check if we got a valid response
    if [ -s "$TEMP_FILE" ] && jq empty "$TEMP_FILE" 2>/dev/null; then
        echo "‚úÖ Successfully fetched device list"
        
        # Find the latest device with agents
        DEVICES_COUNT=$(jq length "$TEMP_FILE")
        
        if [ "$DEVICES_COUNT" -gt 0 ]; then
            # Iterate through devices to find ones with agents
            FOUND_AGENT=false
            
            for (( i=$DEVICES_COUNT-1; i>=0; i-- )); do
                DEVICE=$(jq ".[$i]" "$TEMP_FILE")
                AGENTS_COUNT=$(echo "$DEVICE" | jq '.agents | length')
                
                if [ "$AGENTS_COUNT" -gt 0 ]; then
                    echo "‚úÖ Found device with agents"
                    AGENT_ID=$(echo "$DEVICE" | jq -r '.agents[0].id')
                    DEVICE_ID=$(echo "$DEVICE" | jq -r '.id')
                    echo "üì± Device ID: $DEVICE_ID"
                    echo "ü§ñ Agent ID: $AGENT_ID"
                    FOUND_AGENT=true
                    break
                fi
            done
            
            if [ "$FOUND_AGENT" = true ]; then
                # Fetch detailed agent information
                echo "üîç Fetching agent details from: $AGENT_ENDPOINT?address=$WALLET_ADDRESS"
                curl -s "$AGENT_ENDPOINT?address=$WALLET_ADDRESS" > "$TEMP_FILE" 2>/dev/null
                
                if [ -s "$TEMP_FILE" ] && jq empty "$TEMP_FILE" 2>/dev/null; then
                    echo "‚úÖ Successfully fetched agent details"
                    
                    # Extract agent details
                    AGENT_ADDRESS=$(jq -r '.id' "$TEMP_FILE")
                    DEVICE_ADDRESS=$(jq -r '.deviceAddress.id' "$TEMP_FILE")
                    OWNER_ADDRESS=$(jq -r '.owner.id' "$TEMP_FILE")
                    SERVER_WALLET=$(jq -r '.owner.serverWalletAddress' "$TEMP_FILE")
                    SUBNAME=$(jq -r '.subname' "$TEMP_FILE")
                    AVATAR_URL=$(jq -r '.avatar' "$TEMP_FILE")
                    PER_CALL_FEE=$(jq -r '.perApiCallFee' "$TEMP_FILE")
                    CHARACTER_CONFIG_URL=$(jq -r '.characterConfig' "$TEMP_FILE")
                    IS_PUBLIC=$(jq -r '.isPublic' "$TEMP_FILE")
                    KEY_HASH=$(jq -r '.keyHash' "$TEMP_FILE")
                    CREATED_AT=$(jq -r '.createdAt' "$TEMP_FILE")
                    UPDATED_AT=$(jq -r '.updatedAt' "$TEMP_FILE")
                    
                    echo "=== Latest Agent Details ==="
                    echo "Agent Address: $AGENT_ADDRESS"
                    echo "Subname: $SUBNAME"
                    echo "Device Address: $DEVICE_ADDRESS"
                    echo "Owner: $OWNER_ADDRESS"
                    echo "Server Wallet: $SERVER_WALLET"
                    echo "Per API Call Fee: $PER_CALL_FEE"
                    echo "Public: $IS_PUBLIC"
                    echo "Key Hash: $KEY_HASH"
                    echo "Created At: $CREATED_AT"
                    echo "Updated At: $UPDATED_AT"
                    echo
                    
                    # Fetch character config
                    echo "üé≠ Fetching character config from: $CHARACTER_CONFIG_URL"
                    curl -s "$CHARACTER_CONFIG_URL" > "$TEMP_FILE" 2>/dev/null
                    
                    if [ -s "$TEMP_FILE" ] && jq empty "$TEMP_FILE" 2>/dev/null; then
                        echo "‚úÖ Successfully fetched character config"
                        
                        # Extract key character details
                        NAME=$(jq -r '.name // "Unknown"' "$TEMP_FILE")
                        DESCRIPTION=$(jq -r '.description // "None"' "$TEMP_FILE")
                        PERSONALITY=$(jq -r '.personality // "None"' "$TEMP_FILE")
                        FIRST_MESSAGE=$(jq -r '.first_mes // "None"' "$TEMP_FILE")
                        
                        echo "=== Character Details ==="
                        echo "Name: $NAME"
                        echo "Description: $DESCRIPTION"
                        echo "Personality: $PERSONALITY"
                        echo
                        echo "First Message: $FIRST_MESSAGE"
                        echo
                        
                        echo "=== API Usage ==="
                        echo "Base URL: https://www.frankyagent.xyz/api/chat/$AGENT_ADDRESS"
                        echo "Example curl command:"
                        echo 'curl -X POST "https://www.frankyagent.xyz/api/chat/'"$AGENT_ADDRESS"'" \'
                        echo '  -H "Content-Type: application/json" \'
                        echo '  -d '\''{"message": "Hello, how are you?", "apiKey": "your_api_key"}'\'''
                    else
                        echo "‚ùå Failed to fetch character config"
                    fi
                else
                    echo "‚ùå Failed to fetch agent details"
                fi
            else
                echo "‚ùå No agents found on any device"
            fi
        else
            echo "‚ùå No devices found"
        fi
    else
        echo "‚ùå Failed to fetch devices list"
        echo "Response:"
        cat "$TEMP_FILE"
    fi
    
    # Clean up
    rm -f "$TEMP_FILE"
}

# Main script logic
case "$1" in
    start)
        setup_dependencies
        start_sillytavern
        ;;
    list)
        list_latest_agent
        ;;
    *)
        echo "Usage: franky [start|list]"
        exit 1
        ;;
esac
